-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter_sobel_filter_Pipeline_NORM_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_image : IN STD_LOGIC_VECTOR (63 downto 0);
    cmp_i_i108 : IN STD_LOGIC_VECTOR (0 downto 0);
    local_output_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    local_output_V_ce0 : OUT STD_LOGIC;
    local_output_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    local_output_V_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    local_output_V_1_ce0 : OUT STD_LOGIC;
    local_output_V_1_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln94 : IN STD_LOGIC_VECTOR (15 downto 0);
    shl_i_i_i : IN STD_LOGIC_VECTOR (9 downto 0);
    cmp_i_i : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sobel_filter_sobel_filter_Pipeline_NORM_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv20_493 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010010010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln94_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem1_blk_n_W : STD_LOGIC;
    signal gmem1_blk_n_B : STD_LOGIC;
    signal cmp_i_i_read_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cmp_i_i108_read_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln94_cast_fu_207_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln94_cast_reg_484 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_1_reg_489 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter22_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_489_pp0_iter23_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln94_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_495_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_356_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem1_addr_reg_519 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln102_fu_431_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln102_reg_525 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter11_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter12_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter13_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter14_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter15_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter16_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter17_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter18_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter19_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter20_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter21_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter22_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter23_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter24_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter25_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter26_storemerge_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln837_2_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln108_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal col_fu_112 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln108_fu_330_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul20_fu_116 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul21_fu_244_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_fu_120 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_fu_235_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_253_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_271_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_263_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln837_fu_279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln3_fu_289_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln837_fu_283_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln837_1_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln837_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln108_fu_318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln108_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_378_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast13_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_389_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_394_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal norm_val_V_fu_414_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1649_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_1_fu_423_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_373_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_522 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sobel_filter_mux_21_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component sobel_filter_sdiv_18ns_17ns_10_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component sobel_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_10_1_1_U17 : component sobel_filter_mux_21_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 1,
        dout_WIDTH => 10)
    port map (
        din0 => local_output_V_q0,
        din1 => local_output_V_1_q0,
        din2 => tmp_1_fu_356_p3,
        dout => tmp_1_fu_356_p4);

    sdiv_18ns_17ns_10_22_1_U18 : component sobel_filter_sdiv_18ns_17ns_10_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        ce => grp_fu_373_ce,
        dout => grp_fu_373_p2);

    flow_control_loop_pipe_sequential_init_U : component sobel_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter26_storemerge_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln94_reg_495_pp0_iter24_reg = ap_const_lv1_0) and (cmp_i_i108 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter26_storemerge_reg_196 <= select_ln102_reg_525;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter26_storemerge_reg_196 <= ap_phi_reg_pp0_iter25_storemerge_reg_196;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_storemerge_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_522)) then
                if (((cmp_i_i108_read_reg_475 = ap_const_lv1_0) and (icmp_ln94_fu_229_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_196 <= ap_const_lv10_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_196 <= ap_phi_reg_pp0_iter1_storemerge_reg_196;
                end if;
            end if; 
        end if;
    end process;

    col_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_112 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln94_fu_229_p2 = ap_const_lv1_0))) then 
                    col_fu_112 <= select_ln108_fu_330_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_120 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln94_fu_229_p2 = ap_const_lv1_0))) then 
                    i_fu_120 <= add_ln94_fu_235_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_mul20_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul20_fu_116 <= ap_const_lv20_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln94_fu_229_p2 = ap_const_lv1_0))) then 
                    phi_mul20_fu_116 <= next_mul21_fu_244_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_1_reg_489_pp0_iter10_reg <= i_1_reg_489_pp0_iter9_reg;
                i_1_reg_489_pp0_iter11_reg <= i_1_reg_489_pp0_iter10_reg;
                i_1_reg_489_pp0_iter12_reg <= i_1_reg_489_pp0_iter11_reg;
                i_1_reg_489_pp0_iter13_reg <= i_1_reg_489_pp0_iter12_reg;
                i_1_reg_489_pp0_iter14_reg <= i_1_reg_489_pp0_iter13_reg;
                i_1_reg_489_pp0_iter15_reg <= i_1_reg_489_pp0_iter14_reg;
                i_1_reg_489_pp0_iter16_reg <= i_1_reg_489_pp0_iter15_reg;
                i_1_reg_489_pp0_iter17_reg <= i_1_reg_489_pp0_iter16_reg;
                i_1_reg_489_pp0_iter18_reg <= i_1_reg_489_pp0_iter17_reg;
                i_1_reg_489_pp0_iter19_reg <= i_1_reg_489_pp0_iter18_reg;
                i_1_reg_489_pp0_iter20_reg <= i_1_reg_489_pp0_iter19_reg;
                i_1_reg_489_pp0_iter21_reg <= i_1_reg_489_pp0_iter20_reg;
                i_1_reg_489_pp0_iter22_reg <= i_1_reg_489_pp0_iter21_reg;
                i_1_reg_489_pp0_iter23_reg <= i_1_reg_489_pp0_iter22_reg;
                i_1_reg_489_pp0_iter2_reg <= i_1_reg_489;
                i_1_reg_489_pp0_iter3_reg <= i_1_reg_489_pp0_iter2_reg;
                i_1_reg_489_pp0_iter4_reg <= i_1_reg_489_pp0_iter3_reg;
                i_1_reg_489_pp0_iter5_reg <= i_1_reg_489_pp0_iter4_reg;
                i_1_reg_489_pp0_iter6_reg <= i_1_reg_489_pp0_iter5_reg;
                i_1_reg_489_pp0_iter7_reg <= i_1_reg_489_pp0_iter6_reg;
                i_1_reg_489_pp0_iter8_reg <= i_1_reg_489_pp0_iter7_reg;
                i_1_reg_489_pp0_iter9_reg <= i_1_reg_489_pp0_iter8_reg;
                icmp_ln94_reg_495_pp0_iter10_reg <= icmp_ln94_reg_495_pp0_iter9_reg;
                icmp_ln94_reg_495_pp0_iter11_reg <= icmp_ln94_reg_495_pp0_iter10_reg;
                icmp_ln94_reg_495_pp0_iter12_reg <= icmp_ln94_reg_495_pp0_iter11_reg;
                icmp_ln94_reg_495_pp0_iter13_reg <= icmp_ln94_reg_495_pp0_iter12_reg;
                icmp_ln94_reg_495_pp0_iter14_reg <= icmp_ln94_reg_495_pp0_iter13_reg;
                icmp_ln94_reg_495_pp0_iter15_reg <= icmp_ln94_reg_495_pp0_iter14_reg;
                icmp_ln94_reg_495_pp0_iter16_reg <= icmp_ln94_reg_495_pp0_iter15_reg;
                icmp_ln94_reg_495_pp0_iter17_reg <= icmp_ln94_reg_495_pp0_iter16_reg;
                icmp_ln94_reg_495_pp0_iter18_reg <= icmp_ln94_reg_495_pp0_iter17_reg;
                icmp_ln94_reg_495_pp0_iter19_reg <= icmp_ln94_reg_495_pp0_iter18_reg;
                icmp_ln94_reg_495_pp0_iter20_reg <= icmp_ln94_reg_495_pp0_iter19_reg;
                icmp_ln94_reg_495_pp0_iter21_reg <= icmp_ln94_reg_495_pp0_iter20_reg;
                icmp_ln94_reg_495_pp0_iter22_reg <= icmp_ln94_reg_495_pp0_iter21_reg;
                icmp_ln94_reg_495_pp0_iter23_reg <= icmp_ln94_reg_495_pp0_iter22_reg;
                icmp_ln94_reg_495_pp0_iter24_reg <= icmp_ln94_reg_495_pp0_iter23_reg;
                icmp_ln94_reg_495_pp0_iter2_reg <= icmp_ln94_reg_495;
                icmp_ln94_reg_495_pp0_iter3_reg <= icmp_ln94_reg_495_pp0_iter2_reg;
                icmp_ln94_reg_495_pp0_iter4_reg <= icmp_ln94_reg_495_pp0_iter3_reg;
                icmp_ln94_reg_495_pp0_iter5_reg <= icmp_ln94_reg_495_pp0_iter4_reg;
                icmp_ln94_reg_495_pp0_iter6_reg <= icmp_ln94_reg_495_pp0_iter5_reg;
                icmp_ln94_reg_495_pp0_iter7_reg <= icmp_ln94_reg_495_pp0_iter6_reg;
                icmp_ln94_reg_495_pp0_iter8_reg <= icmp_ln94_reg_495_pp0_iter7_reg;
                icmp_ln94_reg_495_pp0_iter9_reg <= icmp_ln94_reg_495_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                i_1_reg_489 <= i_fu_120;
                icmp_ln94_reg_495 <= icmp_ln94_fu_229_p2;
                    zext_ln94_cast_reg_484(15 downto 0) <= zext_ln94_cast_fu_207_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge_reg_196 <= ap_phi_reg_pp0_iter9_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storemerge_reg_196 <= ap_phi_reg_pp0_iter10_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storemerge_reg_196 <= ap_phi_reg_pp0_iter11_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_storemerge_reg_196 <= ap_phi_reg_pp0_iter12_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_storemerge_reg_196 <= ap_phi_reg_pp0_iter13_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_storemerge_reg_196 <= ap_phi_reg_pp0_iter14_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_storemerge_reg_196 <= ap_phi_reg_pp0_iter15_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_storemerge_reg_196 <= ap_phi_reg_pp0_iter16_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_storemerge_reg_196 <= ap_phi_reg_pp0_iter17_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_storemerge_reg_196 <= ap_phi_reg_pp0_iter18_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_196 <= ap_phi_reg_pp0_iter0_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_storemerge_reg_196 <= ap_phi_reg_pp0_iter19_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_storemerge_reg_196 <= ap_phi_reg_pp0_iter20_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_storemerge_reg_196 <= ap_phi_reg_pp0_iter21_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_storemerge_reg_196 <= ap_phi_reg_pp0_iter22_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_storemerge_reg_196 <= ap_phi_reg_pp0_iter23_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_storemerge_reg_196 <= ap_phi_reg_pp0_iter24_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_196 <= ap_phi_reg_pp0_iter2_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_196 <= ap_phi_reg_pp0_iter3_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_storemerge_reg_196 <= ap_phi_reg_pp0_iter4_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge_reg_196 <= ap_phi_reg_pp0_iter5_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge_reg_196 <= ap_phi_reg_pp0_iter6_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_storemerge_reg_196 <= ap_phi_reg_pp0_iter7_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge_reg_196 <= ap_phi_reg_pp0_iter8_storemerge_reg_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_reg_495_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem1_addr_reg_519 <= sext_ln108_fu_404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_reg_495_pp0_iter23_reg = ap_const_lv1_0) and (cmp_i_i108 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln102_reg_525 <= select_ln102_fu_431_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_reg_495 = ap_const_lv1_0) and (cmp_i_i108 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_509 <= tmp_1_fu_356_p4;
            end if;
        end if;
    end process;
    zext_ln94_cast_reg_484(17 downto 16) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln108_fu_318_p2 <= std_logic_vector(unsigned(col_fu_112) + unsigned(ap_const_lv10_1));
    add_ln837_fu_303_p2 <= std_logic_vector(unsigned(sub_ln837_fu_283_p2) + unsigned(zext_ln837_1_fu_299_p1));
    add_ln94_fu_235_p2 <= std_logic_vector(unsigned(i_fu_120) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter31, m_axi_gmem1_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_gmem1_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter31, m_axi_gmem1_AWREADY, m_axi_gmem1_WREADY, m_axi_gmem1_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem1_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (m_axi_gmem1_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (m_axi_gmem1_AWREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter31, m_axi_gmem1_AWREADY, m_axi_gmem1_WREADY, m_axi_gmem1_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem1_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (m_axi_gmem1_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (m_axi_gmem1_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp0_stage0_iter31_assign_proc : process(m_axi_gmem1_BVALID)
    begin
                ap_block_state32_pp0_stage0_iter31 <= (m_axi_gmem1_BVALID = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_522_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_522 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln94_fu_229_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln94_fu_229_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter30_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_storemerge_reg_196 <= "XXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i108_read_reg_475 <= cmp_i_i108;
    cmp_i_i_read_reg_465 <= cmp_i_i;
    empty_fu_389_p2 <= std_logic_vector(unsigned(p_cast13_fu_385_p1) + unsigned(output_image));

    gmem1_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter25, m_axi_gmem1_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter31, m_axi_gmem1_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter26, m_axi_gmem1_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_373_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_373_ce <= ap_const_logic_1;
        else 
            grp_fu_373_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_373_p0 <= (tmp_1_reg_509 & ap_const_lv8_0);
    grp_fu_373_p1 <= zext_ln94_cast_reg_484(17 - 1 downto 0);
    icmp_ln108_fu_324_p2 <= "1" when (unsigned(add_ln108_fu_318_p2) < unsigned(ap_const_lv10_1C)) else "0";
    icmp_ln1649_fu_418_p2 <= "1" when (signed(norm_val_V_fu_414_p1) > signed(shl_i_i_i)) else "0";
    icmp_ln94_fu_229_p2 <= "1" when (i_fu_120 = ap_const_lv10_310) else "0";
    local_output_V_1_address0 <= zext_ln837_2_fu_309_p1(9 - 1 downto 0);

    local_output_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_output_V_1_ce0 <= ap_const_logic_1;
        else 
            local_output_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_output_V_address0 <= zext_ln837_2_fu_309_p1(9 - 1 downto 0);

    local_output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_output_V_ce0 <= ap_const_logic_1;
        else 
            local_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln3_fu_289_p4 <= col_fu_112(4 downto 1);
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= gmem1_addr_reg_519;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_1;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;

    m_axi_gmem1_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem1_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem1_BREADY_assign_proc : process(ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            m_axi_gmem1_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter26_storemerge_reg_196),16));
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv2_3;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;

    m_axi_gmem1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem1_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    next_mul21_fu_244_p2 <= std_logic_vector(unsigned(phi_mul20_fu_116) + unsigned(ap_const_lv20_493));
    norm_val_V_fu_414_p1 <= grp_fu_373_p2(10 - 1 downto 0);
    p_cast13_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_378_p3),64));
    select_ln102_1_fu_423_p3 <= 
        ap_const_lv10_40 when (icmp_ln1649_fu_418_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln102_fu_431_p3 <= 
        select_ln102_1_fu_423_p3 when (cmp_i_i(0) = '1') else 
        norm_val_V_fu_414_p1;
    select_ln108_fu_330_p3 <= 
        add_ln108_fu_318_p2 when (icmp_ln108_fu_324_p2(0) = '1') else 
        ap_const_lv10_0;
        sext_ln108_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_394_p4),64));

    sub_ln837_fu_283_p2 <= std_logic_vector(unsigned(tmp_3_fu_263_p3) - unsigned(zext_ln837_fu_279_p1));
    tmp_1_fu_356_p3 <= i_1_reg_489(1 - 1 downto 0);
    tmp_3_fu_263_p3 <= (tmp_fu_253_p4 & ap_const_lv4_0);
    tmp_4_fu_271_p3 <= (tmp_fu_253_p4 & ap_const_lv1_0);
    tmp_fu_253_p4 <= phi_mul20_fu_116(19 downto 15);
    tmp_s_fu_378_p3 <= (i_1_reg_489_pp0_iter23_reg & ap_const_lv1_0);
    trunc_ln3_fu_394_p4 <= empty_fu_389_p2(63 downto 1);
    zext_ln837_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_289_p4),9));
    zext_ln837_2_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln837_fu_303_p2),64));
    zext_ln837_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_271_p3),9));
    zext_ln94_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln94),18));
end behav;
